{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr'; // Импорт библиотеки flatpickr для работы с календарем\nimport 'flatpickr/dist/flatpickr.min.css'; // Импорт стилей для календаря\nimport iziToast from 'izitoast'; // Импорт библиотеки для отображения уведомлений\nimport 'izitoast/dist/css/iziToast.min.css'; // Импорт стилей для уведомлений\n\n\nconst startBtn = document.querySelector('[data-start]'); \nconst input = document.querySelector('#datetime-picker'); \nconst daysEl = document.querySelector('[data-days]'); \nconst hoursEl = document.querySelector('[data-hours]'); \nconst minutesEl = document.querySelector('[data-minutes]'); \nconst secondsEl = document.querySelector('[data-seconds]'); \n\nlet userSelectedDate = null; \nlet timerId = null; \n\nstartBtn.disabled = true; // Изначально кнопка \"Start\" не активна,  это булевое (логическое) свойство элемента, которое может быть true или false.\n// Если disabled = true, кнопка становится неактивной (заблокированной), и пользователь не может на неё нажать.\n// Если disabled = false, кнопка активна и пользователь может её использовать.\n\n//настройки flatpickr\nconst options = {\n  enableTime: true, // Включить выбор времени\n  time_24hr: true, // Использовать 24-часовой формат\n  defaultDate: new Date(), // Текущая дата по умолчанию\n  minuteIncrement: 1, // Шаг времени - 1 минута\n\n\n  // selectedDates — это параметр, который передается в метод onClose библиотеки flatpickr.\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0]; // Получаем выбранную дату\n    if (selectedDate <= new Date()) {\n      // Если дата в прошлом, то выводим сообщение и блокируем кнопку, iziToast — это библиотека для отображения всплывающих уведомлений с различными стилями и типами сообщений, такими как успех, ошибка, предупреждение и информация.\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      startBtn.disabled = true;\n    } else {\n      // Если дата в будущем, разблокируем кнопку \"Start\"\n      userSelectedDate = selectedDate; // Сохраняем выбранную дату\n      startBtn.disabled = false; \n    }\n  },\n};\n\n// сделать поле ввода даты и времени интерактивным календарём с выбором даты.\nflatpickr(input, options);\n\n// Добавляем событие на кнопку \"Start\"\nstartBtn.addEventListener('click', () => {\n  // При нажатии на кнопку блокируем ее и input\n  startBtn.disabled = true;\n  input.disabled = true;\n\n  // Запускаем таймер, который обновляет данные каждую секунду\n  timerId = setInterval(() => {\n    const currentTime = new Date(); // Текущая дата\n    const timeDifference = userSelectedDate - currentTime; // Разница между выбранной и текущей датами\n\n    if (timeDifference <= 0) {\n      // Если время закончилось, остановить таймер\n      clearInterval(timerId); // Останавливаем таймер\n      iziToast.success({ title: 'Success', message: 'Time is up!' }); // Показываем уведомление\n      return;\n    }\n\n    // Конвертируем миллисекунды в дни, часы, минуты и секунды\n    const { days, hours, minutes, seconds } = convertMs(timeDifference);\n\n    // Обновляем значения на странице\n    daysEl.textContent = addLeadingZero(days); \n    hoursEl.textContent = addLeadingZero(hours);\n    minutesEl.textContent = addLeadingZero(minutes);\n    secondsEl.textContent = addLeadingZero(seconds);\n  }, 1000); \n});\n\n\nfunction convertMs(ms) {\n  const second = 1000; // Количество миллисекунд в одной секунде\n  const minute = second * 60; // Количество миллисекунд в одной минуте\n  const hour = minute * 60; // Количество миллисекунд в одном часе\n  const day = hour * 24; // Количество миллисекунд в одном дне\n\n  // Вычисляем количество дней, часов, минут и секунд\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds }; // Возвращаем объект с вычисленными значениями\n}\n\n// Функция для добавления 0 перед числом, если оно меньше 10\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0'); // Метод padStart() добавляет 0, если строка меньше двух символов\n}\n"],"names":["startBtn","input","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","timerId","options","selectedDates","selectedDate","iziToast","flatpickr","timeDifference","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"+IAMA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAmB,KACnBC,EAAU,KAEdP,EAAS,SAAW,GAKpB,MAAMQ,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAIjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MAEtBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDX,EAAS,SAAW,KAGpBM,EAAmBI,EACnBV,EAAS,SAAW,GAEvB,CACH,EAGAY,EAAUX,EAAOO,CAAO,EAGxBR,EAAS,iBAAiB,QAAS,IAAM,CAEvCA,EAAS,SAAW,GACpBC,EAAM,SAAW,GAGjBM,EAAU,YAAY,IAAM,CAE1B,MAAMM,EAAiBP,EADH,IAAI,KAGxB,GAAIO,GAAkB,EAAG,CAEvB,cAAcN,CAAO,EACrBI,EAAS,QAAQ,CAAE,MAAO,UAAW,QAAS,aAAa,CAAE,EAC7D,MACD,CAGD,KAAM,CAAE,KAAAG,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAc,EAGlEX,EAAO,YAAciB,EAAeL,CAAI,EACxCX,EAAQ,YAAcgB,EAAeJ,CAAK,EAC1CX,EAAU,YAAce,EAAeH,CAAO,EAC9CX,EAAU,YAAcc,EAAeF,CAAO,CAC/C,EAAE,GAAI,CACT,CAAC,EAGD,SAASC,EAAUE,EAAI,CAOrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGA,SAASE,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}